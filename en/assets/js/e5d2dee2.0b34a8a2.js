"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9539],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return t?a.createElement(f,o(o({ref:n},p),{},{components:t})):a.createElement(f,o({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2067:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const i={},o="polymorphic type",l={unversionedId:"manual/dynamicbean",id:"version-3.x/manual/dynamicbean",title:"polymorphic type",description:"Definition and configuration",source:"@site/i18n/en/docusaurus-plugin-content-docs/version-3.x/manual/dynamicbean.md",sourceDirName:"manual",slug:"/manual/dynamicbean",permalink:"/en/docs/3.x/manual/dynamicbean",draft:!1,tags:[],version:"3.x",frontMatter:{}},c={},s=[{value:"Definition and configuration",id:"definition-and-configuration",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"code usage",id:"code-usage",level:2},{value:"method 1",id:"method-1",level:3},{value:"method 2",id:"method-2",level:3},{value:"method 3",id:"method-3",level:3}],p={toc:s},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"polymorphic-type"},"polymorphic type"),(0,r.kt)("h2",{id:"definition-and-configuration"},"Definition and configuration"),(0,r.kt)("p",null,"See the introduction of polymorphic types in ",(0,r.kt)("a",{parentName:"p",href:"../manual/schema"},"schema logical structure"),"."),(0,r.kt)("h2",{id:"best-practices"},"Best Practices"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Recommended for occasions with variable types, especially GamePlay data, such as skills, AI, tasks, copies, etc."),(0,r.kt)("li",{parentName:"ul"},"Simple ones can be configured in excel, and more complicated ones, especially for skills that require independent compilation, it is recommended to save data in json format")),(0,r.kt)("h2",{id:"code-usage"},"code usage"),(0,r.kt)("p",null,"Suppose it is the following polymorphic type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public abstract class Shape : BeanBase\n{\n    // xxxx\n}\n\npublic class Triangle : Shape\n{\n    float a;\n    float b;\n    float c;\n}\n\npublic class Circle : Shape\n{\n    float radius;\n}\n\npublic class Rectangle : Shape\n{\n    float width;\n    float height;\n}\n")),(0,r.kt)("p",null,"Suppose there is a field Shape shape in the configuration. In the actual logic code, it must be handled differently according to its actual type. There are three ways of writing. When the number of types is small, all three methods can be selected according to personal preference. When the number of types is large, it is recommended to follow method 3, which is more efficient."),(0,r.kt)("h3",{id:"method-1"},"method 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"    if (shape is Circle c)\n    {\n        // xxx\n    }\n    else if(shape is Triangle t)\n    {\n        // xxx\n    }\n    else if(shape is Rectangle r)\n    {\n        // xxx\n    }\n\n")),(0,r.kt)("h3",{id:"method-2"},"method 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"switch(shape)\n{\n    case Circle c:\n    {\n        // xxx;\n        break;\n    }\n    case Triangle t:\n    {\n        // xxx\n        break;\n    }\n    case Rectangle r:\n    {\n        // xxx;\n        break;\n    }\n}\n")),(0,r.kt)("h3",{id:"method-3"},"method 3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"switch(shape.GetTypeId())\n{\n    case Circle::__ID__:\n    {\n        Circle c = (Circle)shape;\n        // xxx;\n        break;\n    }\n    case Triangle::__ID__:\n    {\n        Triangle t = (Triangle)shape;\n        // xxx\n        break;\n    }\n    case Rectangle::__ID__:\n    {\n        Rectangle r = (Rectangle)shape;\n        // xxx;\n        break;\n    }\n}\n")))}d.isMDXComponent=!0}}]);
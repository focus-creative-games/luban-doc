"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7350],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>c});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=n.createContext({}),m=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=m(e.components);return n.createElement(d.Provider,{value:t},e.children)},p="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=m(a),f=i,c=p["".concat(d,".").concat(f)]||p[f]||s[f]||r;return a?n.createElement(c,l(l({ref:t},u),{},{components:a})):n.createElement(c,l({ref:t},u))}));function c(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=f;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var m=2;m<r;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},8291:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>s,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var n=a(7462),i=(a(7294),a(3905));const r={},l="Field Variants",o={unversionedId:"manual/variants",id:"version-3.x/manual/variants",title:"Field Variants",description:"Sometimes the same field may have multiple configurations. A very common scenario is that when making localized data, different regions have different values \u200b\u200bfor a certain initial path.",source:"@site/i18n/en/docusaurus-plugin-content-docs/version-3.x/manual/variants.md",sourceDirName:"manual",slug:"/manual/variants",permalink:"/en/docs/3.x/manual/variants",draft:!1,tags:[],version:"3.x",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"data tag",permalink:"/en/docs/3.x/manual/tag"},next:{title:"localization",permalink:"/en/docs/3.x/manual/l10n"}},d={},m=[{value:"Definition",id:"definition",level:2},{value:"XML definition",id:"xml-definition",level:3},{value:"Define in __beans__.xlsx",id:"define-in-__beans__xlsx",level:3},{value:"Define in the header row of the data table",id:"define-in-the-header-row-of-the-data-table",level:3},{value:"Configure variant data",id:"configure-variant-data",level:2},{value:"excel format family",id:"excel-format-family",level:3},{value:"json format",id:"json-format",level:3},{value:"xml format",id:"xml-format",level:3},{value:"yaml format",id:"yaml-format",level:3},{value:"lua format",id:"lua-format",level:3},{value:"Exporting data",id:"exporting-data",level:2}],u={toc:m},p="wrapper";function s(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"field-variants"},"Field Variants"),(0,i.kt)("p",null,"Sometimes the same field may have multiple configurations. A very common scenario is that when making localized data, different regions have different values \u200b\u200bfor a certain initial path."),(0,i.kt)("p",null,"A rough approach is like this:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"##var"),(0,i.kt)("th",{parentName:"tr",align:null},"id"),(0,i.kt)("th",{parentName:"tr",align:null},"item_id"),(0,i.kt)("th",{parentName:"tr",align:null},"item_id_zh"),(0,i.kt)("th",{parentName:"tr",align:null},"item_id_en"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"##type"),(0,i.kt)("td",{parentName:"tr",align:null},"int"),(0,i.kt)("td",{parentName:"tr",align:null},"int"),(0,i.kt)("td",{parentName:"tr",align:null},"int"),(0,i.kt)("td",{parentName:"tr",align:null},"int")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},"1001"),(0,i.kt)("td",{parentName:"tr",align:null},"2001"),(0,i.kt)("td",{parentName:"tr",align:null},"3001")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},"1002"),(0,i.kt)("td",{parentName:"tr",align:null},"2002"),(0,i.kt)("td",{parentName:"tr",align:null},"3002")))),(0,i.kt)("p",null,"Although this does work, there are several problems:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"For a certain region (such as zh), it does not need item_id in other regions, which will increase the configuration data and increase unnecessary memory overhead")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The programmer needs to choose to read data from item","_","id_zh or item","_","id_en according to the current region, which is inconvenient"))),(0,i.kt)("p",null,"Field variants solve this problem better. Regardless of the region, item","_","id","_","{xxx} will eventually be exported as a common item","_","id field, and will not include other unused item","_","id","_","{yyy}."),(0,i.kt)("h2",{id:"definition"},"Definition"),(0,i.kt)("p",null,"Currently, only fields support variants. Variant information can be defined in all places where fields can be defined."),(0,i.kt)("h3",{id:"xml-definition"},"XML definition"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<bean name="TestVariant">\n<var name="id" type="int"/>\n<var name="value" type="int" variants="zh,en,fr,jp"/>\n</bean>\n')),(0,i.kt)("h3",{id:"define-in-__beans__xlsx"},"Define in ","_","_","beans","_","_",".xlsx"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"variant_beans",src:a(286).Z,width:"543",height:"208"})),(0,i.kt)("h3",{id:"define-in-the-header-row-of-the-data-table"},"Define in the header row of the data table"),(0,i.kt)("p",null,"For fields that need to define variants, define a variable of ",(0,i.kt)("inlineCode",{parentName:"p"},"{fieldName}@{variant}")," for each variant. There are several rules:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The column where the variant header is located must be after the variable name column, that is, ",(0,i.kt)("inlineCode",{parentName:"p"},"value@en")," must be after the ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," column")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"There is no need to define information such as ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"group")," for variant variables. Variant variables directly use the corresponding values \u200b\u200bof the original variables, that is, the ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"value@en")," will take the ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),"."))),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"variant_table_header",src:a(228).Z,width:"582",height:"154"})),(0,i.kt)("h2",{id:"configure-variant-data"},"Configure variant data"),(0,i.kt)("h3",{id:"excel-format-family"},"excel format family"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"variant_table_header",src:a(228).Z,width:"582",height:"154"})),(0,i.kt)("h3",{id:"json-format"},"json format"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n"id":1,\n"value@en": 1001\n}\n\n')),(0,i.kt)("h3",{id:"xml-format"},"xml format"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<data>\n<id>1</id>\n<value variant="en">1001</value>\n</data>\n')),(0,i.kt)("h3",{id:"yaml-format"},"yaml format"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},"id: 1\nvalue@en: 1001\n")),(0,i.kt)("h3",{id:"lua-format"},"lua format"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'return {\nid=1,\n["value@en"] = 1001,\n}\n')),(0,i.kt)("h2",{id:"exporting-data"},"Exporting data"),(0,i.kt)("p",null,"Generally speaking, since a variable variant is defined, the variant that should be used should be specified for the variable when exporting data. The command parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"--variant {variantKey}={variantName}")," is used to specify the currently used variant for the field.",(0,i.kt)("inlineCode",{parentName:"p"},"{variantKey}")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"{beanFullName}.{fieldName}"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"{variantName}")," is the variant name. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"--variant TestVariant.value=en")," means that when exporting data, the value field takes the value corresponding to the ",(0,i.kt)("inlineCode",{parentName:"p"},"value@en")," column."),(0,i.kt)("p",null,"After specifying the currently used variant for a variable, if the corresponding field does not exist, the value of the default field is taken. Similarly, taking variant en as an example, if the ",(0,i.kt)("inlineCode",{parentName:"p"},"value@en")," column does not exist, the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," column is taken. If the ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," column does not exist either, an error that the field cannot be found is thrown."),(0,i.kt)("p",null,"You can set a global default variant using --variant default={variantName}, and when a variant is not individually set for a bean, the global default variant will be used."),(0,i.kt)("p",null,"If a field has a variant defined, but the variant name used by the field is not specified using ",(0,i.kt)("inlineCode",{parentName:"p"},"--variant")," in the command line, the value of the original variable without the variant is read. At this time, Luban will print a warning log."))}s.isMDXComponent=!0},286:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/variant_beans-cdf1853bbd00abdbaf4b3a201030b381.jpg"},228:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/variant_table_header-1cfc92e1daecaa3673c1afaf7fec86ce.jpg"}}]);